// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpc_token.proto
// Original file comments:
// Copyright 2018 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_grpc_5ftoken_2eproto__INCLUDED
#define GRPC_grpc_5ftoken_2eproto__INCLUDED

#include "grpc_token.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace tokengrpc {

// A simple key-value storage service
class Token final {
 public:
  static constexpr char const* service_full_name() {
    return "tokengrpc.Token";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Provides a value for each key request
    virtual ::grpc::Status Partial_Polynomial_interpolation(::grpc::ClientContext* context, const ::token::Token& request, ::tokengrpc::Value* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tokengrpc::Value>> AsyncPartial_Polynomial_interpolation(::grpc::ClientContext* context, const ::token::Token& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tokengrpc::Value>>(AsyncPartial_Polynomial_interpolationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tokengrpc::Value>> PrepareAsyncPartial_Polynomial_interpolation(::grpc::ClientContext* context, const ::token::Token& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tokengrpc::Value>>(PrepareAsyncPartial_Polynomial_interpolationRaw(context, request, cq));
    }
    virtual ::grpc::Status Get_tokens(::grpc::ClientContext* context, const ::tokengrpc::Node_id& request, ::tokengrpc::List_tokens* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tokengrpc::List_tokens>> AsyncGet_tokens(::grpc::ClientContext* context, const ::tokengrpc::Node_id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tokengrpc::List_tokens>>(AsyncGet_tokensRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tokengrpc::List_tokens>> PrepareAsyncGet_tokens(::grpc::ClientContext* context, const ::tokengrpc::Node_id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tokengrpc::List_tokens>>(PrepareAsyncGet_tokensRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Provides a value for each key request
      virtual void Partial_Polynomial_interpolation(::grpc::ClientContext* context, const ::token::Token* request, ::tokengrpc::Value* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Partial_Polynomial_interpolation(::grpc::ClientContext* context, const ::token::Token* request, ::tokengrpc::Value* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Get_tokens(::grpc::ClientContext* context, const ::tokengrpc::Node_id* request, ::tokengrpc::List_tokens* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Get_tokens(::grpc::ClientContext* context, const ::tokengrpc::Node_id* request, ::tokengrpc::List_tokens* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tokengrpc::Value>* AsyncPartial_Polynomial_interpolationRaw(::grpc::ClientContext* context, const ::token::Token& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tokengrpc::Value>* PrepareAsyncPartial_Polynomial_interpolationRaw(::grpc::ClientContext* context, const ::token::Token& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tokengrpc::List_tokens>* AsyncGet_tokensRaw(::grpc::ClientContext* context, const ::tokengrpc::Node_id& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tokengrpc::List_tokens>* PrepareAsyncGet_tokensRaw(::grpc::ClientContext* context, const ::tokengrpc::Node_id& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Partial_Polynomial_interpolation(::grpc::ClientContext* context, const ::token::Token& request, ::tokengrpc::Value* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tokengrpc::Value>> AsyncPartial_Polynomial_interpolation(::grpc::ClientContext* context, const ::token::Token& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tokengrpc::Value>>(AsyncPartial_Polynomial_interpolationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tokengrpc::Value>> PrepareAsyncPartial_Polynomial_interpolation(::grpc::ClientContext* context, const ::token::Token& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tokengrpc::Value>>(PrepareAsyncPartial_Polynomial_interpolationRaw(context, request, cq));
    }
    ::grpc::Status Get_tokens(::grpc::ClientContext* context, const ::tokengrpc::Node_id& request, ::tokengrpc::List_tokens* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tokengrpc::List_tokens>> AsyncGet_tokens(::grpc::ClientContext* context, const ::tokengrpc::Node_id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tokengrpc::List_tokens>>(AsyncGet_tokensRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tokengrpc::List_tokens>> PrepareAsyncGet_tokens(::grpc::ClientContext* context, const ::tokengrpc::Node_id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tokengrpc::List_tokens>>(PrepareAsyncGet_tokensRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Partial_Polynomial_interpolation(::grpc::ClientContext* context, const ::token::Token* request, ::tokengrpc::Value* response, std::function<void(::grpc::Status)>) override;
      void Partial_Polynomial_interpolation(::grpc::ClientContext* context, const ::token::Token* request, ::tokengrpc::Value* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Get_tokens(::grpc::ClientContext* context, const ::tokengrpc::Node_id* request, ::tokengrpc::List_tokens* response, std::function<void(::grpc::Status)>) override;
      void Get_tokens(::grpc::ClientContext* context, const ::tokengrpc::Node_id* request, ::tokengrpc::List_tokens* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::tokengrpc::Value>* AsyncPartial_Polynomial_interpolationRaw(::grpc::ClientContext* context, const ::token::Token& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tokengrpc::Value>* PrepareAsyncPartial_Polynomial_interpolationRaw(::grpc::ClientContext* context, const ::token::Token& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tokengrpc::List_tokens>* AsyncGet_tokensRaw(::grpc::ClientContext* context, const ::tokengrpc::Node_id& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tokengrpc::List_tokens>* PrepareAsyncGet_tokensRaw(::grpc::ClientContext* context, const ::tokengrpc::Node_id& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Partial_Polynomial_interpolation_;
    const ::grpc::internal::RpcMethod rpcmethod_Get_tokens_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Provides a value for each key request
    virtual ::grpc::Status Partial_Polynomial_interpolation(::grpc::ServerContext* context, const ::token::Token* request, ::tokengrpc::Value* response);
    virtual ::grpc::Status Get_tokens(::grpc::ServerContext* context, const ::tokengrpc::Node_id* request, ::tokengrpc::List_tokens* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Partial_Polynomial_interpolation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Partial_Polynomial_interpolation() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Partial_Polynomial_interpolation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Partial_Polynomial_interpolation(::grpc::ServerContext* /*context*/, const ::token::Token* /*request*/, ::tokengrpc::Value* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPartial_Polynomial_interpolation(::grpc::ServerContext* context, ::token::Token* request, ::grpc::ServerAsyncResponseWriter< ::tokengrpc::Value>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Get_tokens : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Get_tokens() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Get_tokens() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get_tokens(::grpc::ServerContext* /*context*/, const ::tokengrpc::Node_id* /*request*/, ::tokengrpc::List_tokens* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet_tokens(::grpc::ServerContext* context, ::tokengrpc::Node_id* request, ::grpc::ServerAsyncResponseWriter< ::tokengrpc::List_tokens>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Partial_Polynomial_interpolation<WithAsyncMethod_Get_tokens<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Partial_Polynomial_interpolation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Partial_Polynomial_interpolation() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::token::Token, ::tokengrpc::Value>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::token::Token* request, ::tokengrpc::Value* response) { return this->Partial_Polynomial_interpolation(context, request, response); }));}
    void SetMessageAllocatorFor_Partial_Polynomial_interpolation(
        ::grpc::MessageAllocator< ::token::Token, ::tokengrpc::Value>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::token::Token, ::tokengrpc::Value>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Partial_Polynomial_interpolation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Partial_Polynomial_interpolation(::grpc::ServerContext* /*context*/, const ::token::Token* /*request*/, ::tokengrpc::Value* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Partial_Polynomial_interpolation(
      ::grpc::CallbackServerContext* /*context*/, const ::token::Token* /*request*/, ::tokengrpc::Value* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Get_tokens : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Get_tokens() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::tokengrpc::Node_id, ::tokengrpc::List_tokens>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tokengrpc::Node_id* request, ::tokengrpc::List_tokens* response) { return this->Get_tokens(context, request, response); }));}
    void SetMessageAllocatorFor_Get_tokens(
        ::grpc::MessageAllocator< ::tokengrpc::Node_id, ::tokengrpc::List_tokens>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tokengrpc::Node_id, ::tokengrpc::List_tokens>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Get_tokens() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get_tokens(::grpc::ServerContext* /*context*/, const ::tokengrpc::Node_id* /*request*/, ::tokengrpc::List_tokens* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Get_tokens(
      ::grpc::CallbackServerContext* /*context*/, const ::tokengrpc::Node_id* /*request*/, ::tokengrpc::List_tokens* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Partial_Polynomial_interpolation<WithCallbackMethod_Get_tokens<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Partial_Polynomial_interpolation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Partial_Polynomial_interpolation() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Partial_Polynomial_interpolation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Partial_Polynomial_interpolation(::grpc::ServerContext* /*context*/, const ::token::Token* /*request*/, ::tokengrpc::Value* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Get_tokens : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Get_tokens() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Get_tokens() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get_tokens(::grpc::ServerContext* /*context*/, const ::tokengrpc::Node_id* /*request*/, ::tokengrpc::List_tokens* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Partial_Polynomial_interpolation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Partial_Polynomial_interpolation() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Partial_Polynomial_interpolation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Partial_Polynomial_interpolation(::grpc::ServerContext* /*context*/, const ::token::Token* /*request*/, ::tokengrpc::Value* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPartial_Polynomial_interpolation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Get_tokens : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Get_tokens() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Get_tokens() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get_tokens(::grpc::ServerContext* /*context*/, const ::tokengrpc::Node_id* /*request*/, ::tokengrpc::List_tokens* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet_tokens(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Partial_Polynomial_interpolation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Partial_Polynomial_interpolation() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Partial_Polynomial_interpolation(context, request, response); }));
    }
    ~WithRawCallbackMethod_Partial_Polynomial_interpolation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Partial_Polynomial_interpolation(::grpc::ServerContext* /*context*/, const ::token::Token* /*request*/, ::tokengrpc::Value* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Partial_Polynomial_interpolation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Get_tokens : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Get_tokens() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Get_tokens(context, request, response); }));
    }
    ~WithRawCallbackMethod_Get_tokens() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get_tokens(::grpc::ServerContext* /*context*/, const ::tokengrpc::Node_id* /*request*/, ::tokengrpc::List_tokens* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Get_tokens(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Partial_Polynomial_interpolation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Partial_Polynomial_interpolation() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::token::Token, ::tokengrpc::Value>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::token::Token, ::tokengrpc::Value>* streamer) {
                       return this->StreamedPartial_Polynomial_interpolation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Partial_Polynomial_interpolation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Partial_Polynomial_interpolation(::grpc::ServerContext* /*context*/, const ::token::Token* /*request*/, ::tokengrpc::Value* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPartial_Polynomial_interpolation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::token::Token,::tokengrpc::Value>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Get_tokens : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Get_tokens() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tokengrpc::Node_id, ::tokengrpc::List_tokens>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tokengrpc::Node_id, ::tokengrpc::List_tokens>* streamer) {
                       return this->StreamedGet_tokens(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Get_tokens() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Get_tokens(::grpc::ServerContext* /*context*/, const ::tokengrpc::Node_id* /*request*/, ::tokengrpc::List_tokens* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGet_tokens(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tokengrpc::Node_id,::tokengrpc::List_tokens>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Partial_Polynomial_interpolation<WithStreamedUnaryMethod_Get_tokens<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Partial_Polynomial_interpolation<WithStreamedUnaryMethod_Get_tokens<Service > > StreamedService;
};

}  // namespace tokengrpc


#endif  // GRPC_grpc_5ftoken_2eproto__INCLUDED
