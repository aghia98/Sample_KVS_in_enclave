// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpc_token.proto

#include "grpc_token.pb.h"
#include "grpc_token.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace tokengrpc {

static const char* Token_method_names[] = {
  "/tokengrpc.Token/Partial_Polynomial_interpolation",
  "/tokengrpc.Token/Get_tokens",
};

std::unique_ptr< Token::Stub> Token::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Token::Stub> stub(new Token::Stub(channel, options));
  return stub;
}

Token::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Partial_Polynomial_interpolation_(Token_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Get_tokens_(Token_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Token::Stub::Partial_Polynomial_interpolation(::grpc::ClientContext* context, const ::token::Token& request, ::tokengrpc::Value* response) {
  return ::grpc::internal::BlockingUnaryCall< ::token::Token, ::tokengrpc::Value, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Partial_Polynomial_interpolation_, context, request, response);
}

void Token::Stub::async::Partial_Polynomial_interpolation(::grpc::ClientContext* context, const ::token::Token* request, ::tokengrpc::Value* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::token::Token, ::tokengrpc::Value, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Partial_Polynomial_interpolation_, context, request, response, std::move(f));
}

void Token::Stub::async::Partial_Polynomial_interpolation(::grpc::ClientContext* context, const ::token::Token* request, ::tokengrpc::Value* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Partial_Polynomial_interpolation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tokengrpc::Value>* Token::Stub::PrepareAsyncPartial_Polynomial_interpolationRaw(::grpc::ClientContext* context, const ::token::Token& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tokengrpc::Value, ::token::Token, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Partial_Polynomial_interpolation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tokengrpc::Value>* Token::Stub::AsyncPartial_Polynomial_interpolationRaw(::grpc::ClientContext* context, const ::token::Token& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPartial_Polynomial_interpolationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Token::Stub::Get_tokens(::grpc::ClientContext* context, const ::tokengrpc::Node_id& request, ::tokengrpc::List_tokens* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tokengrpc::Node_id, ::tokengrpc::List_tokens, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Get_tokens_, context, request, response);
}

void Token::Stub::async::Get_tokens(::grpc::ClientContext* context, const ::tokengrpc::Node_id* request, ::tokengrpc::List_tokens* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tokengrpc::Node_id, ::tokengrpc::List_tokens, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_tokens_, context, request, response, std::move(f));
}

void Token::Stub::async::Get_tokens(::grpc::ClientContext* context, const ::tokengrpc::Node_id* request, ::tokengrpc::List_tokens* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_tokens_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tokengrpc::List_tokens>* Token::Stub::PrepareAsyncGet_tokensRaw(::grpc::ClientContext* context, const ::tokengrpc::Node_id& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tokengrpc::List_tokens, ::tokengrpc::Node_id, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Get_tokens_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tokengrpc::List_tokens>* Token::Stub::AsyncGet_tokensRaw(::grpc::ClientContext* context, const ::tokengrpc::Node_id& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGet_tokensRaw(context, request, cq);
  result->StartCall();
  return result;
}

Token::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Token_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Token::Service, ::token::Token, ::tokengrpc::Value, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Token::Service* service,
             ::grpc::ServerContext* ctx,
             const ::token::Token* req,
             ::tokengrpc::Value* resp) {
               return service->Partial_Polynomial_interpolation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Token_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Token::Service, ::tokengrpc::Node_id, ::tokengrpc::List_tokens, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Token::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tokengrpc::Node_id* req,
             ::tokengrpc::List_tokens* resp) {
               return service->Get_tokens(ctx, req, resp);
             }, this)));
}

Token::Service::~Service() {
}

::grpc::Status Token::Service::Partial_Polynomial_interpolation(::grpc::ServerContext* context, const ::token::Token* request, ::tokengrpc::Value* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Token::Service::Get_tokens(::grpc::ServerContext* context, const ::tokengrpc::Node_id* request, ::tokengrpc::List_tokens* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace tokengrpc

