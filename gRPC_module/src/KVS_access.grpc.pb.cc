// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: KVS_access.proto

#include "KVS_access.pb.h"
#include "KVS_access.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace keyvaluestore {

static const char* KVS_method_names[] = {
  "/keyvaluestore.KVS/Get",
  "/keyvaluestore.KVS/Put",
  "/keyvaluestore.KVS/Delete",
  "/keyvaluestore.KVS/Generate_polynomial_and_broadcast",
  "/keyvaluestore.KVS/Share_lost_keys",
  "/keyvaluestore.KVS/Store_polynomial_share",
  "/keyvaluestore.KVS/get_keys_shares",
};

std::unique_ptr< KVS::Stub> KVS::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< KVS::Stub> stub(new KVS::Stub(channel, options));
  return stub;
}

KVS::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Get_(KVS_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Put_(KVS_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Delete_(KVS_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Generate_polynomial_and_broadcast_(KVS_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Share_lost_keys_(KVS_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Store_polynomial_share_(KVS_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_keys_shares_(KVS_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status KVS::Stub::Get(::grpc::ClientContext* context, const ::keyvaluestore::Key& request, ::keyvaluestore::Value* response) {
  return ::grpc::internal::BlockingUnaryCall< ::keyvaluestore::Key, ::keyvaluestore::Value, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Get_, context, request, response);
}

void KVS::Stub::async::Get(::grpc::ClientContext* context, const ::keyvaluestore::Key* request, ::keyvaluestore::Value* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::keyvaluestore::Key, ::keyvaluestore::Value, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

void KVS::Stub::async::Get(::grpc::ClientContext* context, const ::keyvaluestore::Key* request, ::keyvaluestore::Value* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::keyvaluestore::Value>* KVS::Stub::PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::keyvaluestore::Key& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::keyvaluestore::Value, ::keyvaluestore::Key, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Get_, context, request);
}

::grpc::ClientAsyncResponseReader< ::keyvaluestore::Value>* KVS::Stub::AsyncGetRaw(::grpc::ClientContext* context, const ::keyvaluestore::Key& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status KVS::Stub::Put(::grpc::ClientContext* context, const ::keyvaluestore::KV_pair& request, ::keyvaluestore::Value* response) {
  return ::grpc::internal::BlockingUnaryCall< ::keyvaluestore::KV_pair, ::keyvaluestore::Value, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Put_, context, request, response);
}

void KVS::Stub::async::Put(::grpc::ClientContext* context, const ::keyvaluestore::KV_pair* request, ::keyvaluestore::Value* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::keyvaluestore::KV_pair, ::keyvaluestore::Value, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Put_, context, request, response, std::move(f));
}

void KVS::Stub::async::Put(::grpc::ClientContext* context, const ::keyvaluestore::KV_pair* request, ::keyvaluestore::Value* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Put_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::keyvaluestore::Value>* KVS::Stub::PrepareAsyncPutRaw(::grpc::ClientContext* context, const ::keyvaluestore::KV_pair& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::keyvaluestore::Value, ::keyvaluestore::KV_pair, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Put_, context, request);
}

::grpc::ClientAsyncResponseReader< ::keyvaluestore::Value>* KVS::Stub::AsyncPutRaw(::grpc::ClientContext* context, const ::keyvaluestore::KV_pair& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPutRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status KVS::Stub::Delete(::grpc::ClientContext* context, const ::keyvaluestore::Key& request, ::keyvaluestore::Value* response) {
  return ::grpc::internal::BlockingUnaryCall< ::keyvaluestore::Key, ::keyvaluestore::Value, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Delete_, context, request, response);
}

void KVS::Stub::async::Delete(::grpc::ClientContext* context, const ::keyvaluestore::Key* request, ::keyvaluestore::Value* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::keyvaluestore::Key, ::keyvaluestore::Value, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

void KVS::Stub::async::Delete(::grpc::ClientContext* context, const ::keyvaluestore::Key* request, ::keyvaluestore::Value* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::keyvaluestore::Value>* KVS::Stub::PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::keyvaluestore::Key& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::keyvaluestore::Value, ::keyvaluestore::Key, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Delete_, context, request);
}

::grpc::ClientAsyncResponseReader< ::keyvaluestore::Value>* KVS::Stub::AsyncDeleteRaw(::grpc::ClientContext* context, const ::keyvaluestore::Key& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status KVS::Stub::Generate_polynomial_and_broadcast(::grpc::ClientContext* context, const ::keyvaluestore::New_id_with_S_up_ids& request, ::keyvaluestore::Value* response) {
  return ::grpc::internal::BlockingUnaryCall< ::keyvaluestore::New_id_with_S_up_ids, ::keyvaluestore::Value, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Generate_polynomial_and_broadcast_, context, request, response);
}

void KVS::Stub::async::Generate_polynomial_and_broadcast(::grpc::ClientContext* context, const ::keyvaluestore::New_id_with_S_up_ids* request, ::keyvaluestore::Value* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::keyvaluestore::New_id_with_S_up_ids, ::keyvaluestore::Value, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Generate_polynomial_and_broadcast_, context, request, response, std::move(f));
}

void KVS::Stub::async::Generate_polynomial_and_broadcast(::grpc::ClientContext* context, const ::keyvaluestore::New_id_with_S_up_ids* request, ::keyvaluestore::Value* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Generate_polynomial_and_broadcast_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::keyvaluestore::Value>* KVS::Stub::PrepareAsyncGenerate_polynomial_and_broadcastRaw(::grpc::ClientContext* context, const ::keyvaluestore::New_id_with_S_up_ids& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::keyvaluestore::Value, ::keyvaluestore::New_id_with_S_up_ids, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Generate_polynomial_and_broadcast_, context, request);
}

::grpc::ClientAsyncResponseReader< ::keyvaluestore::Value>* KVS::Stub::AsyncGenerate_polynomial_and_broadcastRaw(::grpc::ClientContext* context, const ::keyvaluestore::New_id_with_S_up_ids& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGenerate_polynomial_and_broadcastRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::keyvaluestore::Lost_keys>* KVS::Stub::Share_lost_keysRaw(::grpc::ClientContext* context, const ::keyvaluestore::New_id_with_S_up_ids& request) {
  return ::grpc::internal::ClientReaderFactory< ::keyvaluestore::Lost_keys>::Create(channel_.get(), rpcmethod_Share_lost_keys_, context, request);
}

void KVS::Stub::async::Share_lost_keys(::grpc::ClientContext* context, const ::keyvaluestore::New_id_with_S_up_ids* request, ::grpc::ClientReadReactor< ::keyvaluestore::Lost_keys>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::keyvaluestore::Lost_keys>::Create(stub_->channel_.get(), stub_->rpcmethod_Share_lost_keys_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::keyvaluestore::Lost_keys>* KVS::Stub::AsyncShare_lost_keysRaw(::grpc::ClientContext* context, const ::keyvaluestore::New_id_with_S_up_ids& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::keyvaluestore::Lost_keys>::Create(channel_.get(), cq, rpcmethod_Share_lost_keys_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::keyvaluestore::Lost_keys>* KVS::Stub::PrepareAsyncShare_lost_keysRaw(::grpc::ClientContext* context, const ::keyvaluestore::New_id_with_S_up_ids& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::keyvaluestore::Lost_keys>::Create(channel_.get(), cq, rpcmethod_Share_lost_keys_, context, request, false, nullptr);
}

::grpc::Status KVS::Stub::Store_polynomial_share(::grpc::ClientContext* context, const ::keyvaluestore::New_id_with_polynomial& request, ::keyvaluestore::Value* response) {
  return ::grpc::internal::BlockingUnaryCall< ::keyvaluestore::New_id_with_polynomial, ::keyvaluestore::Value, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Store_polynomial_share_, context, request, response);
}

void KVS::Stub::async::Store_polynomial_share(::grpc::ClientContext* context, const ::keyvaluestore::New_id_with_polynomial* request, ::keyvaluestore::Value* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::keyvaluestore::New_id_with_polynomial, ::keyvaluestore::Value, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Store_polynomial_share_, context, request, response, std::move(f));
}

void KVS::Stub::async::Store_polynomial_share(::grpc::ClientContext* context, const ::keyvaluestore::New_id_with_polynomial* request, ::keyvaluestore::Value* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Store_polynomial_share_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::keyvaluestore::Value>* KVS::Stub::PrepareAsyncStore_polynomial_shareRaw(::grpc::ClientContext* context, const ::keyvaluestore::New_id_with_polynomial& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::keyvaluestore::Value, ::keyvaluestore::New_id_with_polynomial, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Store_polynomial_share_, context, request);
}

::grpc::ClientAsyncResponseReader< ::keyvaluestore::Value>* KVS::Stub::AsyncStore_polynomial_shareRaw(::grpc::ClientContext* context, const ::keyvaluestore::New_id_with_polynomial& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStore_polynomial_shareRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::keyvaluestore::Keys_and_shares>* KVS::Stub::get_keys_sharesRaw(::grpc::ClientContext* context, const ::keyvaluestore::New_id_with_polynomial& request) {
  return ::grpc::internal::ClientReaderFactory< ::keyvaluestore::Keys_and_shares>::Create(channel_.get(), rpcmethod_get_keys_shares_, context, request);
}

void KVS::Stub::async::get_keys_shares(::grpc::ClientContext* context, const ::keyvaluestore::New_id_with_polynomial* request, ::grpc::ClientReadReactor< ::keyvaluestore::Keys_and_shares>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::keyvaluestore::Keys_and_shares>::Create(stub_->channel_.get(), stub_->rpcmethod_get_keys_shares_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::keyvaluestore::Keys_and_shares>* KVS::Stub::Asyncget_keys_sharesRaw(::grpc::ClientContext* context, const ::keyvaluestore::New_id_with_polynomial& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::keyvaluestore::Keys_and_shares>::Create(channel_.get(), cq, rpcmethod_get_keys_shares_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::keyvaluestore::Keys_and_shares>* KVS::Stub::PrepareAsyncget_keys_sharesRaw(::grpc::ClientContext* context, const ::keyvaluestore::New_id_with_polynomial& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::keyvaluestore::Keys_and_shares>::Create(channel_.get(), cq, rpcmethod_get_keys_shares_, context, request, false, nullptr);
}

KVS::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KVS_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KVS::Service, ::keyvaluestore::Key, ::keyvaluestore::Value, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](KVS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::keyvaluestore::Key* req,
             ::keyvaluestore::Value* resp) {
               return service->Get(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KVS_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KVS::Service, ::keyvaluestore::KV_pair, ::keyvaluestore::Value, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](KVS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::keyvaluestore::KV_pair* req,
             ::keyvaluestore::Value* resp) {
               return service->Put(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KVS_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KVS::Service, ::keyvaluestore::Key, ::keyvaluestore::Value, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](KVS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::keyvaluestore::Key* req,
             ::keyvaluestore::Value* resp) {
               return service->Delete(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KVS_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KVS::Service, ::keyvaluestore::New_id_with_S_up_ids, ::keyvaluestore::Value, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](KVS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::keyvaluestore::New_id_with_S_up_ids* req,
             ::keyvaluestore::Value* resp) {
               return service->Generate_polynomial_and_broadcast(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KVS_method_names[4],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< KVS::Service, ::keyvaluestore::New_id_with_S_up_ids, ::keyvaluestore::Lost_keys>(
          [](KVS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::keyvaluestore::New_id_with_S_up_ids* req,
             ::grpc::ServerWriter<::keyvaluestore::Lost_keys>* writer) {
               return service->Share_lost_keys(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KVS_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KVS::Service, ::keyvaluestore::New_id_with_polynomial, ::keyvaluestore::Value, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](KVS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::keyvaluestore::New_id_with_polynomial* req,
             ::keyvaluestore::Value* resp) {
               return service->Store_polynomial_share(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KVS_method_names[6],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< KVS::Service, ::keyvaluestore::New_id_with_polynomial, ::keyvaluestore::Keys_and_shares>(
          [](KVS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::keyvaluestore::New_id_with_polynomial* req,
             ::grpc::ServerWriter<::keyvaluestore::Keys_and_shares>* writer) {
               return service->get_keys_shares(ctx, req, writer);
             }, this)));
}

KVS::Service::~Service() {
}

::grpc::Status KVS::Service::Get(::grpc::ServerContext* context, const ::keyvaluestore::Key* request, ::keyvaluestore::Value* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KVS::Service::Put(::grpc::ServerContext* context, const ::keyvaluestore::KV_pair* request, ::keyvaluestore::Value* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KVS::Service::Delete(::grpc::ServerContext* context, const ::keyvaluestore::Key* request, ::keyvaluestore::Value* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KVS::Service::Generate_polynomial_and_broadcast(::grpc::ServerContext* context, const ::keyvaluestore::New_id_with_S_up_ids* request, ::keyvaluestore::Value* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KVS::Service::Share_lost_keys(::grpc::ServerContext* context, const ::keyvaluestore::New_id_with_S_up_ids* request, ::grpc::ServerWriter< ::keyvaluestore::Lost_keys>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KVS::Service::Store_polynomial_share(::grpc::ServerContext* context, const ::keyvaluestore::New_id_with_polynomial* request, ::keyvaluestore::Value* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KVS::Service::get_keys_shares(::grpc::ServerContext* context, const ::keyvaluestore::New_id_with_polynomial* request, ::grpc::ServerWriter< ::keyvaluestore::Keys_and_shares>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace keyvaluestore

