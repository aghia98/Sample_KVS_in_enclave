// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: token.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_token_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_token_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_token_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_token_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_token_2eproto;
namespace token {
class Token;
struct TokenDefaultTypeInternal;
extern TokenDefaultTypeInternal _Token_default_instance_;
}  // namespace token
PROTOBUF_NAMESPACE_OPEN
template<> ::token::Token* Arena::CreateMaybeMessage<::token::Token>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace token {

// ===================================================================

class Token final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:token.Token) */ {
 public:
  inline Token() : Token(nullptr) {}
  ~Token() override;
  explicit PROTOBUF_CONSTEXPR Token(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Token(const Token& from);
  Token(Token&& from) noexcept
    : Token() {
    *this = ::std::move(from);
  }

  inline Token& operator=(const Token& from) {
    CopyFrom(from);
    return *this;
  }
  inline Token& operator=(Token&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Token& default_instance() {
    return *internal_default_instance();
  }
  static inline const Token* internal_default_instance() {
    return reinterpret_cast<const Token*>(
               &_Token_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Token& a, Token& b) {
    a.Swap(&b);
  }
  inline void Swap(Token* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Token* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Token* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Token>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Token& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Token& from) {
    Token::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Token* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "token.Token";
  }
  protected:
  explicit Token(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 5,
    kKeyFieldNumber = 2,
    kInitiatorIdFieldNumber = 1,
    kCumulFieldNumber = 3,
    kPassesFieldNumber = 4,
  };
  // repeated int32 path = 5;
  int path_size() const;
  private:
  int _internal_path_size() const;
  public:
  void clear_path();
  private:
  int32_t _internal_path(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_path() const;
  void _internal_add_path(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_path();
  public:
  int32_t path(int index) const;
  void set_path(int index, int32_t value);
  void add_path(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      path() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_path();

  // string key = 2;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // int32 initiator_id = 1;
  void clear_initiator_id();
  int32_t initiator_id() const;
  void set_initiator_id(int32_t value);
  private:
  int32_t _internal_initiator_id() const;
  void _internal_set_initiator_id(int32_t value);
  public:

  // int32 cumul = 3;
  void clear_cumul();
  int32_t cumul() const;
  void set_cumul(int32_t value);
  private:
  int32_t _internal_cumul() const;
  void _internal_set_cumul(int32_t value);
  public:

  // int32 passes = 4;
  void clear_passes();
  int32_t passes() const;
  void set_passes(int32_t value);
  private:
  int32_t _internal_passes() const;
  void _internal_set_passes(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:token.Token)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > path_;
    mutable std::atomic<int> _path_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    int32_t initiator_id_;
    int32_t cumul_;
    int32_t passes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_token_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Token

// int32 initiator_id = 1;
inline void Token::clear_initiator_id() {
  _impl_.initiator_id_ = 0;
}
inline int32_t Token::_internal_initiator_id() const {
  return _impl_.initiator_id_;
}
inline int32_t Token::initiator_id() const {
  // @@protoc_insertion_point(field_get:token.Token.initiator_id)
  return _internal_initiator_id();
}
inline void Token::_internal_set_initiator_id(int32_t value) {
  
  _impl_.initiator_id_ = value;
}
inline void Token::set_initiator_id(int32_t value) {
  _internal_set_initiator_id(value);
  // @@protoc_insertion_point(field_set:token.Token.initiator_id)
}

// string key = 2;
inline void Token::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& Token::key() const {
  // @@protoc_insertion_point(field_get:token.Token.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Token::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:token.Token.key)
}
inline std::string* Token::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:token.Token.key)
  return _s;
}
inline const std::string& Token::_internal_key() const {
  return _impl_.key_.Get();
}
inline void Token::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* Token::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* Token::release_key() {
  // @@protoc_insertion_point(field_release:token.Token.key)
  return _impl_.key_.Release();
}
inline void Token::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:token.Token.key)
}

// int32 cumul = 3;
inline void Token::clear_cumul() {
  _impl_.cumul_ = 0;
}
inline int32_t Token::_internal_cumul() const {
  return _impl_.cumul_;
}
inline int32_t Token::cumul() const {
  // @@protoc_insertion_point(field_get:token.Token.cumul)
  return _internal_cumul();
}
inline void Token::_internal_set_cumul(int32_t value) {
  
  _impl_.cumul_ = value;
}
inline void Token::set_cumul(int32_t value) {
  _internal_set_cumul(value);
  // @@protoc_insertion_point(field_set:token.Token.cumul)
}

// int32 passes = 4;
inline void Token::clear_passes() {
  _impl_.passes_ = 0;
}
inline int32_t Token::_internal_passes() const {
  return _impl_.passes_;
}
inline int32_t Token::passes() const {
  // @@protoc_insertion_point(field_get:token.Token.passes)
  return _internal_passes();
}
inline void Token::_internal_set_passes(int32_t value) {
  
  _impl_.passes_ = value;
}
inline void Token::set_passes(int32_t value) {
  _internal_set_passes(value);
  // @@protoc_insertion_point(field_set:token.Token.passes)
}

// repeated int32 path = 5;
inline int Token::_internal_path_size() const {
  return _impl_.path_.size();
}
inline int Token::path_size() const {
  return _internal_path_size();
}
inline void Token::clear_path() {
  _impl_.path_.Clear();
}
inline int32_t Token::_internal_path(int index) const {
  return _impl_.path_.Get(index);
}
inline int32_t Token::path(int index) const {
  // @@protoc_insertion_point(field_get:token.Token.path)
  return _internal_path(index);
}
inline void Token::set_path(int index, int32_t value) {
  _impl_.path_.Set(index, value);
  // @@protoc_insertion_point(field_set:token.Token.path)
}
inline void Token::_internal_add_path(int32_t value) {
  _impl_.path_.Add(value);
}
inline void Token::add_path(int32_t value) {
  _internal_add_path(value);
  // @@protoc_insertion_point(field_add:token.Token.path)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Token::_internal_path() const {
  return _impl_.path_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Token::path() const {
  // @@protoc_insertion_point(field_list:token.Token.path)
  return _internal_path();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Token::_internal_mutable_path() {
  return &_impl_.path_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Token::mutable_path() {
  // @@protoc_insertion_point(field_mutable_list:token.Token.path)
  return _internal_mutable_path();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace token

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_token_2eproto
