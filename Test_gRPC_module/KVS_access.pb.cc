// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KVS_access.proto

#include "KVS_access.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace keyvaluestore {
PROTOBUF_CONSTEXPR Key::Key(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct KeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KeyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KeyDefaultTypeInternal() {}
  union {
    Key _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KeyDefaultTypeInternal _Key_default_instance_;
PROTOBUF_CONSTEXPR Value::Value(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValueDefaultTypeInternal() {}
  union {
    Value _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValueDefaultTypeInternal _Value_default_instance_;
PROTOBUF_CONSTEXPR KV_pair::KV_pair(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct KV_pairDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KV_pairDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KV_pairDefaultTypeInternal() {}
  union {
    KV_pair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KV_pairDefaultTypeInternal _KV_pair_default_instance_;
PROTOBUF_CONSTEXPR Lost_keys::Lost_keys(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.keys_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Lost_keysDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Lost_keysDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Lost_keysDefaultTypeInternal() {}
  union {
    Lost_keys _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Lost_keysDefaultTypeInternal _Lost_keys_default_instance_;
PROTOBUF_CONSTEXPR New_id_with_S_up_ids::New_id_with_S_up_ids(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.s_up_ids_)*/{}
  , /*decltype(_impl_._s_up_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.new_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct New_id_with_S_up_idsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR New_id_with_S_up_idsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~New_id_with_S_up_idsDefaultTypeInternal() {}
  union {
    New_id_with_S_up_ids _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 New_id_with_S_up_idsDefaultTypeInternal _New_id_with_S_up_ids_default_instance_;
PROTOBUF_CONSTEXPR New_id_with_polynomial::New_id_with_polynomial(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.new_id_)*/0
  , /*decltype(_impl_.polynomial_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct New_id_with_polynomialDefaultTypeInternal {
  PROTOBUF_CONSTEXPR New_id_with_polynomialDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~New_id_with_polynomialDefaultTypeInternal() {}
  union {
    New_id_with_polynomial _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 New_id_with_polynomialDefaultTypeInternal _New_id_with_polynomial_default_instance_;
PROTOBUF_CONSTEXPR Keys_and_shares::Keys_and_shares(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.keys_and_shares_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Keys_and_sharesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Keys_and_sharesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Keys_and_sharesDefaultTypeInternal() {}
  union {
    Keys_and_shares _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Keys_and_sharesDefaultTypeInternal _Keys_and_shares_default_instance_;
}  // namespace keyvaluestore
static ::_pb::Metadata file_level_metadata_KVS_5faccess_2eproto[7];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_KVS_5faccess_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_KVS_5faccess_2eproto = nullptr;

const uint32_t TableStruct_KVS_5faccess_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::keyvaluestore::Key, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::keyvaluestore::Key, _impl_.key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::keyvaluestore::Value, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::keyvaluestore::Value, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::keyvaluestore::KV_pair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::keyvaluestore::KV_pair, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::keyvaluestore::KV_pair, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::keyvaluestore::Lost_keys, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::keyvaluestore::Lost_keys, _impl_.keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::keyvaluestore::New_id_with_S_up_ids, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::keyvaluestore::New_id_with_S_up_ids, _impl_.new_id_),
  PROTOBUF_FIELD_OFFSET(::keyvaluestore::New_id_with_S_up_ids, _impl_.s_up_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::keyvaluestore::New_id_with_polynomial, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::keyvaluestore::New_id_with_polynomial, _impl_.new_id_),
  PROTOBUF_FIELD_OFFSET(::keyvaluestore::New_id_with_polynomial, _impl_.polynomial_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::keyvaluestore::Keys_and_shares, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::keyvaluestore::Keys_and_shares, _impl_.keys_and_shares_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::keyvaluestore::Key)},
  { 7, -1, -1, sizeof(::keyvaluestore::Value)},
  { 14, -1, -1, sizeof(::keyvaluestore::KV_pair)},
  { 22, -1, -1, sizeof(::keyvaluestore::Lost_keys)},
  { 29, -1, -1, sizeof(::keyvaluestore::New_id_with_S_up_ids)},
  { 37, -1, -1, sizeof(::keyvaluestore::New_id_with_polynomial)},
  { 45, -1, -1, sizeof(::keyvaluestore::Keys_and_shares)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::keyvaluestore::_Key_default_instance_._instance,
  &::keyvaluestore::_Value_default_instance_._instance,
  &::keyvaluestore::_KV_pair_default_instance_._instance,
  &::keyvaluestore::_Lost_keys_default_instance_._instance,
  &::keyvaluestore::_New_id_with_S_up_ids_default_instance_._instance,
  &::keyvaluestore::_New_id_with_polynomial_default_instance_._instance,
  &::keyvaluestore::_Keys_and_shares_default_instance_._instance,
};

const char descriptor_table_protodef_KVS_5faccess_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020KVS_access.proto\022\rkeyvaluestore\"\022\n\003Key"
  "\022\013\n\003key\030\001 \001(\t\"\026\n\005Value\022\r\n\005value\030\001 \001(\t\"%\n"
  "\007KV_pair\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"-\n\t"
  "Lost_keys\022 \n\004keys\030\001 \003(\0132\022.keyvaluestore."
  "Key\"8\n\024New_id_with_S_up_ids\022\016\n\006new_id\030\001 "
  "\001(\005\022\020\n\010S_up_ids\030\002 \003(\005\"<\n\026New_id_with_pol"
  "ynomial\022\016\n\006new_id\030\001 \001(\005\022\022\n\npolynomial\030\002 "
  "\001(\005\"*\n\017Keys_and_shares\022\027\n\017keys_and_share"
  "s\030\001 \003(\t2\273\003\n\003KVS\0221\n\003Get\022\022.keyvaluestore.K"
  "ey\032\024.keyvaluestore.Value\"\000\0225\n\003Put\022\026.keyv"
  "aluestore.KV_pair\032\024.keyvaluestore.Value\""
  "\000\0224\n\006Delete\022\022.keyvaluestore.Key\032\024.keyval"
  "uestore.Value\"\000\022`\n!Generate_polynomial_a"
  "nd_broadcast\022#.keyvaluestore.New_id_with"
  "_S_up_ids\032\024.keyvaluestore.Value\"\000\022T\n\017Sha"
  "re_lost_keys\022#.keyvaluestore.New_id_with"
  "_S_up_ids\032\030.keyvaluestore.Lost_keys\"\0000\001\022"
  "\\\n\017get_keys_shares\022%.keyvaluestore.New_i"
  "d_with_polynomial\032\036.keyvaluestore.Keys_a"
  "nd_shares\"\0000\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_KVS_5faccess_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_KVS_5faccess_2eproto = {
    false, false, 781, descriptor_table_protodef_KVS_5faccess_2eproto,
    "KVS_access.proto",
    &descriptor_table_KVS_5faccess_2eproto_once, nullptr, 0, 7,
    schemas, file_default_instances, TableStruct_KVS_5faccess_2eproto::offsets,
    file_level_metadata_KVS_5faccess_2eproto, file_level_enum_descriptors_KVS_5faccess_2eproto,
    file_level_service_descriptors_KVS_5faccess_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_KVS_5faccess_2eproto_getter() {
  return &descriptor_table_KVS_5faccess_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_KVS_5faccess_2eproto(&descriptor_table_KVS_5faccess_2eproto);
namespace keyvaluestore {

// ===================================================================

class Key::_Internal {
 public:
};

Key::Key(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:keyvaluestore.Key)
}
Key::Key(const Key& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Key* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:keyvaluestore.Key)
}

inline void Key::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Key::~Key() {
  // @@protoc_insertion_point(destructor:keyvaluestore.Key)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Key::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
}

void Key::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Key::Clear() {
// @@protoc_insertion_point(message_clear_start:keyvaluestore.Key)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Key::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "keyvaluestore.Key.key"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Key::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:keyvaluestore.Key)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "keyvaluestore.Key.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:keyvaluestore.Key)
  return target;
}

size_t Key::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:keyvaluestore.Key)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Key::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Key::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Key::GetClassData() const { return &_class_data_; }


void Key::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Key*>(&to_msg);
  auto& from = static_cast<const Key&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:keyvaluestore.Key)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Key::CopyFrom(const Key& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:keyvaluestore.Key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Key::IsInitialized() const {
  return true;
}

void Key::InternalSwap(Key* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Key::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KVS_5faccess_2eproto_getter, &descriptor_table_KVS_5faccess_2eproto_once,
      file_level_metadata_KVS_5faccess_2eproto[0]);
}

// ===================================================================

class Value::_Internal {
 public:
};

Value::Value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:keyvaluestore.Value)
}
Value::Value(const Value& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Value* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:keyvaluestore.Value)
}

inline void Value::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Value::~Value() {
  // @@protoc_insertion_point(destructor:keyvaluestore.Value)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Value::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.Destroy();
}

void Value::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Value::Clear() {
// @@protoc_insertion_point(message_clear_start:keyvaluestore.Value)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Value::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "keyvaluestore.Value.value"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Value::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:keyvaluestore.Value)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "keyvaluestore.Value.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:keyvaluestore.Value)
  return target;
}

size_t Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:keyvaluestore.Value)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Value::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Value::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Value::GetClassData() const { return &_class_data_; }


void Value::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Value*>(&to_msg);
  auto& from = static_cast<const Value&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:keyvaluestore.Value)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Value::CopyFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:keyvaluestore.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value::IsInitialized() const {
  return true;
}

void Value::InternalSwap(Value* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Value::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KVS_5faccess_2eproto_getter, &descriptor_table_KVS_5faccess_2eproto_once,
      file_level_metadata_KVS_5faccess_2eproto[1]);
}

// ===================================================================

class KV_pair::_Internal {
 public:
};

KV_pair::KV_pair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:keyvaluestore.KV_pair)
}
KV_pair::KV_pair(const KV_pair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KV_pair* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:keyvaluestore.KV_pair)
}

inline void KV_pair::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

KV_pair::~KV_pair() {
  // @@protoc_insertion_point(destructor:keyvaluestore.KV_pair)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KV_pair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
  _impl_.value_.Destroy();
}

void KV_pair::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KV_pair::Clear() {
// @@protoc_insertion_point(message_clear_start:keyvaluestore.KV_pair)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KV_pair::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "keyvaluestore.KV_pair.key"));
        } else
          goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "keyvaluestore.KV_pair.value"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KV_pair::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:keyvaluestore.KV_pair)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "keyvaluestore.KV_pair.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "keyvaluestore.KV_pair.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:keyvaluestore.KV_pair)
  return target;
}

size_t KV_pair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:keyvaluestore.KV_pair)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KV_pair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KV_pair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KV_pair::GetClassData() const { return &_class_data_; }


void KV_pair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KV_pair*>(&to_msg);
  auto& from = static_cast<const KV_pair&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:keyvaluestore.KV_pair)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KV_pair::CopyFrom(const KV_pair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:keyvaluestore.KV_pair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KV_pair::IsInitialized() const {
  return true;
}

void KV_pair::InternalSwap(KV_pair* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata KV_pair::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KVS_5faccess_2eproto_getter, &descriptor_table_KVS_5faccess_2eproto_once,
      file_level_metadata_KVS_5faccess_2eproto[2]);
}

// ===================================================================

class Lost_keys::_Internal {
 public:
};

Lost_keys::Lost_keys(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:keyvaluestore.Lost_keys)
}
Lost_keys::Lost_keys(const Lost_keys& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Lost_keys* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_){from._impl_.keys_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:keyvaluestore.Lost_keys)
}

inline void Lost_keys::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Lost_keys::~Lost_keys() {
  // @@protoc_insertion_point(destructor:keyvaluestore.Lost_keys)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Lost_keys::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keys_.~RepeatedPtrField();
}

void Lost_keys::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Lost_keys::Clear() {
// @@protoc_insertion_point(message_clear_start:keyvaluestore.Lost_keys)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.keys_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Lost_keys::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .keyvaluestore.Key keys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Lost_keys::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:keyvaluestore.Lost_keys)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .keyvaluestore.Key keys = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_keys_size()); i < n; i++) {
    const auto& repfield = this->_internal_keys(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:keyvaluestore.Lost_keys)
  return target;
}

size_t Lost_keys::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:keyvaluestore.Lost_keys)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .keyvaluestore.Key keys = 1;
  total_size += 1UL * this->_internal_keys_size();
  for (const auto& msg : this->_impl_.keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Lost_keys::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Lost_keys::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Lost_keys::GetClassData() const { return &_class_data_; }


void Lost_keys::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Lost_keys*>(&to_msg);
  auto& from = static_cast<const Lost_keys&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:keyvaluestore.Lost_keys)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.keys_.MergeFrom(from._impl_.keys_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Lost_keys::CopyFrom(const Lost_keys& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:keyvaluestore.Lost_keys)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lost_keys::IsInitialized() const {
  return true;
}

void Lost_keys::InternalSwap(Lost_keys* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.keys_.InternalSwap(&other->_impl_.keys_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Lost_keys::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KVS_5faccess_2eproto_getter, &descriptor_table_KVS_5faccess_2eproto_once,
      file_level_metadata_KVS_5faccess_2eproto[3]);
}

// ===================================================================

class New_id_with_S_up_ids::_Internal {
 public:
};

New_id_with_S_up_ids::New_id_with_S_up_ids(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:keyvaluestore.New_id_with_S_up_ids)
}
New_id_with_S_up_ids::New_id_with_S_up_ids(const New_id_with_S_up_ids& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  New_id_with_S_up_ids* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.s_up_ids_){from._impl_.s_up_ids_}
    , /*decltype(_impl_._s_up_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.new_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.new_id_ = from._impl_.new_id_;
  // @@protoc_insertion_point(copy_constructor:keyvaluestore.New_id_with_S_up_ids)
}

inline void New_id_with_S_up_ids::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.s_up_ids_){arena}
    , /*decltype(_impl_._s_up_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.new_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

New_id_with_S_up_ids::~New_id_with_S_up_ids() {
  // @@protoc_insertion_point(destructor:keyvaluestore.New_id_with_S_up_ids)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void New_id_with_S_up_ids::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.s_up_ids_.~RepeatedField();
}

void New_id_with_S_up_ids::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void New_id_with_S_up_ids::Clear() {
// @@protoc_insertion_point(message_clear_start:keyvaluestore.New_id_with_S_up_ids)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.s_up_ids_.Clear();
  _impl_.new_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* New_id_with_S_up_ids::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 new_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.new_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 S_up_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_s_up_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_s_up_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* New_id_with_S_up_ids::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:keyvaluestore.New_id_with_S_up_ids)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 new_id = 1;
  if (this->_internal_new_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_new_id(), target);
  }

  // repeated int32 S_up_ids = 2;
  {
    int byte_size = _impl_._s_up_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_s_up_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:keyvaluestore.New_id_with_S_up_ids)
  return target;
}

size_t New_id_with_S_up_ids::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:keyvaluestore.New_id_with_S_up_ids)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 S_up_ids = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.s_up_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._s_up_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 new_id = 1;
  if (this->_internal_new_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_new_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData New_id_with_S_up_ids::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    New_id_with_S_up_ids::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*New_id_with_S_up_ids::GetClassData() const { return &_class_data_; }


void New_id_with_S_up_ids::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<New_id_with_S_up_ids*>(&to_msg);
  auto& from = static_cast<const New_id_with_S_up_ids&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:keyvaluestore.New_id_with_S_up_ids)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.s_up_ids_.MergeFrom(from._impl_.s_up_ids_);
  if (from._internal_new_id() != 0) {
    _this->_internal_set_new_id(from._internal_new_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void New_id_with_S_up_ids::CopyFrom(const New_id_with_S_up_ids& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:keyvaluestore.New_id_with_S_up_ids)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool New_id_with_S_up_ids::IsInitialized() const {
  return true;
}

void New_id_with_S_up_ids::InternalSwap(New_id_with_S_up_ids* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.s_up_ids_.InternalSwap(&other->_impl_.s_up_ids_);
  swap(_impl_.new_id_, other->_impl_.new_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata New_id_with_S_up_ids::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KVS_5faccess_2eproto_getter, &descriptor_table_KVS_5faccess_2eproto_once,
      file_level_metadata_KVS_5faccess_2eproto[4]);
}

// ===================================================================

class New_id_with_polynomial::_Internal {
 public:
};

New_id_with_polynomial::New_id_with_polynomial(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:keyvaluestore.New_id_with_polynomial)
}
New_id_with_polynomial::New_id_with_polynomial(const New_id_with_polynomial& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  New_id_with_polynomial* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.new_id_){}
    , decltype(_impl_.polynomial_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.new_id_, &from._impl_.new_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.polynomial_) -
    reinterpret_cast<char*>(&_impl_.new_id_)) + sizeof(_impl_.polynomial_));
  // @@protoc_insertion_point(copy_constructor:keyvaluestore.New_id_with_polynomial)
}

inline void New_id_with_polynomial::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.new_id_){0}
    , decltype(_impl_.polynomial_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

New_id_with_polynomial::~New_id_with_polynomial() {
  // @@protoc_insertion_point(destructor:keyvaluestore.New_id_with_polynomial)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void New_id_with_polynomial::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void New_id_with_polynomial::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void New_id_with_polynomial::Clear() {
// @@protoc_insertion_point(message_clear_start:keyvaluestore.New_id_with_polynomial)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.new_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.polynomial_) -
      reinterpret_cast<char*>(&_impl_.new_id_)) + sizeof(_impl_.polynomial_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* New_id_with_polynomial::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 new_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.new_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 polynomial = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.polynomial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* New_id_with_polynomial::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:keyvaluestore.New_id_with_polynomial)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 new_id = 1;
  if (this->_internal_new_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_new_id(), target);
  }

  // int32 polynomial = 2;
  if (this->_internal_polynomial() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_polynomial(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:keyvaluestore.New_id_with_polynomial)
  return target;
}

size_t New_id_with_polynomial::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:keyvaluestore.New_id_with_polynomial)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 new_id = 1;
  if (this->_internal_new_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_new_id());
  }

  // int32 polynomial = 2;
  if (this->_internal_polynomial() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_polynomial());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData New_id_with_polynomial::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    New_id_with_polynomial::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*New_id_with_polynomial::GetClassData() const { return &_class_data_; }


void New_id_with_polynomial::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<New_id_with_polynomial*>(&to_msg);
  auto& from = static_cast<const New_id_with_polynomial&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:keyvaluestore.New_id_with_polynomial)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_new_id() != 0) {
    _this->_internal_set_new_id(from._internal_new_id());
  }
  if (from._internal_polynomial() != 0) {
    _this->_internal_set_polynomial(from._internal_polynomial());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void New_id_with_polynomial::CopyFrom(const New_id_with_polynomial& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:keyvaluestore.New_id_with_polynomial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool New_id_with_polynomial::IsInitialized() const {
  return true;
}

void New_id_with_polynomial::InternalSwap(New_id_with_polynomial* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(New_id_with_polynomial, _impl_.polynomial_)
      + sizeof(New_id_with_polynomial::_impl_.polynomial_)
      - PROTOBUF_FIELD_OFFSET(New_id_with_polynomial, _impl_.new_id_)>(
          reinterpret_cast<char*>(&_impl_.new_id_),
          reinterpret_cast<char*>(&other->_impl_.new_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata New_id_with_polynomial::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KVS_5faccess_2eproto_getter, &descriptor_table_KVS_5faccess_2eproto_once,
      file_level_metadata_KVS_5faccess_2eproto[5]);
}

// ===================================================================

class Keys_and_shares::_Internal {
 public:
};

Keys_and_shares::Keys_and_shares(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:keyvaluestore.Keys_and_shares)
}
Keys_and_shares::Keys_and_shares(const Keys_and_shares& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Keys_and_shares* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_and_shares_){from._impl_.keys_and_shares_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:keyvaluestore.Keys_and_shares)
}

inline void Keys_and_shares::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_and_shares_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Keys_and_shares::~Keys_and_shares() {
  // @@protoc_insertion_point(destructor:keyvaluestore.Keys_and_shares)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Keys_and_shares::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keys_and_shares_.~RepeatedPtrField();
}

void Keys_and_shares::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Keys_and_shares::Clear() {
// @@protoc_insertion_point(message_clear_start:keyvaluestore.Keys_and_shares)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.keys_and_shares_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Keys_and_shares::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string keys_and_shares = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_keys_and_shares();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "keyvaluestore.Keys_and_shares.keys_and_shares"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Keys_and_shares::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:keyvaluestore.Keys_and_shares)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string keys_and_shares = 1;
  for (int i = 0, n = this->_internal_keys_and_shares_size(); i < n; i++) {
    const auto& s = this->_internal_keys_and_shares(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "keyvaluestore.Keys_and_shares.keys_and_shares");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:keyvaluestore.Keys_and_shares)
  return target;
}

size_t Keys_and_shares::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:keyvaluestore.Keys_and_shares)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string keys_and_shares = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.keys_and_shares_.size());
  for (int i = 0, n = _impl_.keys_and_shares_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.keys_and_shares_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Keys_and_shares::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Keys_and_shares::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Keys_and_shares::GetClassData() const { return &_class_data_; }


void Keys_and_shares::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Keys_and_shares*>(&to_msg);
  auto& from = static_cast<const Keys_and_shares&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:keyvaluestore.Keys_and_shares)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.keys_and_shares_.MergeFrom(from._impl_.keys_and_shares_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Keys_and_shares::CopyFrom(const Keys_and_shares& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:keyvaluestore.Keys_and_shares)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Keys_and_shares::IsInitialized() const {
  return true;
}

void Keys_and_shares::InternalSwap(Keys_and_shares* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.keys_and_shares_.InternalSwap(&other->_impl_.keys_and_shares_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Keys_and_shares::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KVS_5faccess_2eproto_getter, &descriptor_table_KVS_5faccess_2eproto_once,
      file_level_metadata_KVS_5faccess_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace keyvaluestore
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::keyvaluestore::Key*
Arena::CreateMaybeMessage< ::keyvaluestore::Key >(Arena* arena) {
  return Arena::CreateMessageInternal< ::keyvaluestore::Key >(arena);
}
template<> PROTOBUF_NOINLINE ::keyvaluestore::Value*
Arena::CreateMaybeMessage< ::keyvaluestore::Value >(Arena* arena) {
  return Arena::CreateMessageInternal< ::keyvaluestore::Value >(arena);
}
template<> PROTOBUF_NOINLINE ::keyvaluestore::KV_pair*
Arena::CreateMaybeMessage< ::keyvaluestore::KV_pair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::keyvaluestore::KV_pair >(arena);
}
template<> PROTOBUF_NOINLINE ::keyvaluestore::Lost_keys*
Arena::CreateMaybeMessage< ::keyvaluestore::Lost_keys >(Arena* arena) {
  return Arena::CreateMessageInternal< ::keyvaluestore::Lost_keys >(arena);
}
template<> PROTOBUF_NOINLINE ::keyvaluestore::New_id_with_S_up_ids*
Arena::CreateMaybeMessage< ::keyvaluestore::New_id_with_S_up_ids >(Arena* arena) {
  return Arena::CreateMessageInternal< ::keyvaluestore::New_id_with_S_up_ids >(arena);
}
template<> PROTOBUF_NOINLINE ::keyvaluestore::New_id_with_polynomial*
Arena::CreateMaybeMessage< ::keyvaluestore::New_id_with_polynomial >(Arena* arena) {
  return Arena::CreateMessageInternal< ::keyvaluestore::New_id_with_polynomial >(arena);
}
template<> PROTOBUF_NOINLINE ::keyvaluestore::Keys_and_shares*
Arena::CreateMaybeMessage< ::keyvaluestore::Keys_and_shares >(Arena* arena) {
  return Arena::CreateMessageInternal< ::keyvaluestore::Keys_and_shares >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
