/*
 * Generated by erpcgen 1.10.0 on Thu Apr 13 14:57:26 2023.
 *
 * AUTOGENERATED - DO NOT EDIT
 */


#include "erpc_access_KVS_server.h"
#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
#include <new>
#include "erpc_port.h"
#endif
#include "erpc_manually_constructed.hpp"

#if 11000 != ERPC_VERSION_NUMBER
#error "The generated shim code version is different to the rest of eRPC code."
#endif

using namespace erpc;
using namespace std;

#if ERPC_NESTED_CALLS_DETECTION
bool nestingDetection;
#endif

ERPC_MANUALLY_CONSTRUCTED_STATIC(AccessKVS_service, s_AccessKVS_service);



// Call the correct server shim based on method unique ID.
erpc_status_t AccessKVS_service::handleInvocation(uint32_t methodId, uint32_t sequence, Codec * codec, MessageBufferFactory *messageFactory)
{
    erpc_status_t erpcStatus;
    switch (methodId)
    {
        case kAccessKVS_erpcGet_id:
        {
            erpcStatus = erpcGet_shim(codec, messageFactory, sequence);
            break;
        }

        case kAccessKVS_erpcPut_id:
        {
            erpcStatus = erpcPut_shim(codec, messageFactory, sequence);
            break;
        }

        default:
        {
            erpcStatus = kErpcStatus_InvalidArgument;
            break;
        }
    }

    return erpcStatus;
}

// Server shim for erpcGet of AccessKVS interface.
erpc_status_t AccessKVS_service::erpcGet_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t k;
    int32_t v;

    // startReadMessage() was already called before this shim was invoked.

    codec->read(k);

    err = codec->getStatus();
    if (err == kErpcStatus_Success)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        erpcGet(k, &v);
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBuffer());
    }

    if (err == kErpcStatus_Success)
    {
        // preparing codec for serializing data
        codec->reset();

        // Build response message.
        codec->startWriteMessage(kReplyMessage, kAccessKVS_service_id, kAccessKVS_erpcGet_id, sequence);

        codec->write(v);

        err = codec->getStatus();
    }

    return err;
}

// Server shim for erpcPut of AccessKVS interface.
erpc_status_t AccessKVS_service::erpcPut_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t k;
    int32_t v;

    // startReadMessage() was already called before this shim was invoked.

    codec->read(k);

    codec->read(v);

    err = codec->getStatus();
    if (err == kErpcStatus_Success)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        erpcPut(k, v);
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBuffer());
    }

    if (err == kErpcStatus_Success)
    {
        // preparing codec for serializing data
        codec->reset();

        // Build response message.
        codec->startWriteMessage(kReplyMessage, kAccessKVS_service_id, kAccessKVS_erpcPut_id, sequence);

        err = codec->getStatus();
    }

    return err;
}

erpc_service_t create_AccessKVS_service(void)
{
    erpc_service_t service;

#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
    service = new (nothrow) AccessKVS_service();
#else
    if (s_AccessKVS_service.isUsed())
    {
        service = NULL;
    }
    else
    {
        s_AccessKVS_service.construct();
        service = s_AccessKVS_service.get();
    }
#endif

    return service;
}

void destroy_AccessKVS_service(erpc_service_t service)
{
#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
    erpc_assert(service != NULL);
    delete (AccessKVS_service *)service;
#else
    (void)service;
    erpc_assert(service == s_AccessKVS_service.get());
    s_AccessKVS_service.destroy();
#endif
}

